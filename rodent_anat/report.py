"""
rodent_anat: Output report

Jenna's suggestions:

 - SNR
 - CNR
 - some metric to show that bias field correction reduces signal inhomogeneity 
   within and across slices
 - cross correlation with template in subject space before and after both linear 
   and non-linear registration (for non-linear it could also be a comparison 
   between mmorf and ANTs). This would allow us to confirm that the registration 
   improves alignment
 - cross correlation between tissue maps generated by segmentation and the 
   corresponding probability maps from the template in subject space (this is 
   only relevant to where we use the maps as priors and run fast-based 
   segmentation).

I also think it would be great to include the sanity check snapshots generated 
by slicer throughout the pipeline so that can visually confirm what has happened 
with each step.
"""
import os
import logging

import matplotlib
import matplotlib.pyplot as plt
from matplotlib.backends.backend_pdf import PdfPages

LOG = logging.getLogger(__name__)

def _show_table(ax, table_title, table_content, table_colours=None):
    """
    Write a table to the PDF
    """
    ax.axis('off')
    ax.axis('tight')
    ax.set_title(table_title, fontsize=12, fontweight='bold',loc='left')
    c1len = max([len(str(c[0])) for c in table_content])
    c2len = max([len(str(c[1])) for c in table_content])
    col_prop = c1len / (c1len+c2len)
    tb = ax.table(
        cellText=table_content, 
        cellColours=table_colours,
        loc='upper center',
        cellLoc='left',
        colWidths=[col_prop, 1-col_prop],
    )
    tb.auto_set_font_size(True)
    tb.scale(1, 2)

def run(options):
    LOG.info("START: GENERATING REPORT")

    outdir = os.path.abspath(options.output)

    report_fname = os.path.join(outdir, "report.pdf")
    pdf = PdfPages(report_fname)

    plt.figure(figsize=(8.27,11.69))   # Standard portrait A4 sizes
    plt.suptitle(f"RODENT_ANAT: Report for {options.input}", fontsize=10, fontweight='bold')

    ax = plt.subplot(2, 1, 1)
    qc_measures = []
    qc_measures.append(["CNR", "1.23"])
    qc_measures.append(["SNR", "4.56"])
    qc_measures.append(["Signal inhomogenaity (non bias corrected)", "7.89"])
    qc_measures.append(["Signal inhomogenaity (bias corrected)", "1.23"])
    qc_measures.append(["Cross-correlation with template (linear)", "4.56"])
    qc_measures.append(["Cross-correlation with template (nonlinear)", "7.89"])
    _show_table(ax, "QC measures", qc_measures)

    img = matplotlib.image.imread("thingy.png")
    ax = plt.subplot(1, 1, 1)
    im = ax.imshow(img, interpolation='none', cmap="gray", vmin = 0, vmax=1)
    plt.colorbar(im, ax=ax)
    ax.grid(False)
    ax.axis('off')
    ax.set_title('')

    plt.tight_layout(h_pad=1, pad=4)
    plt.savefig(pdf, format='pdf')
    plt.close()

    pdf.close()

    LOG.info("DONE: GENERATING REPORT")